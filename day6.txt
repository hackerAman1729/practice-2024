import numpy as np

def rref(matrix):
    A = np.array(matrix, dtype=float)
    m, n = A.shape
    i = 0
    j = 0
    rank = 0
    pivotal_columns = []
    
    while i < m and j < n:
        max_row = np.argmax(np.abs(A[i:, j])) + i
        if np.isclose(A[max_row, j], 0):
            j += 1
        else:
            A[[i, max_row]] = A[[max_row, i]]
            A[i] = A[i] / A[i, j]
            for x in range(m):
                if x != i:
                    A[x] = A[x] - A[x, j] * A[i]
            pivotal_columns.append(j)
            i += 1
            j += 1
            rank += 1
            
    return A, rank, pivotal_columns

# Test the function
A = np.array([[1, 3, 4], [5, -9, -8], [4, 7, 8]])
B = np.array([[1, 6, 7], [-1, -5, 1], [1, 9, 0]])

rref_A, rank_A, pivotal_columns_A = rref(A)
rref_B, rank_B, pivotal_columns_B = rref(B)

rref_A, rank_A, pivotal_columns_A, rref_B, rank_B, pivotal_columns_B
